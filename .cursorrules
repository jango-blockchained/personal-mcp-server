# .cursorrules for Boilerplate MCP Server

## Project Overview

- **Name**: `@aashari/boilerplate-mcp-server`
- **Version**: 1.3.1 (sync with `package.json`)
- **Description**: TypeScript MCP server template for IP lookup, designed for AI clients (e.g., Claude, Cursor AI).
- **Tech**: Node.js v22.14.0+, TypeScript (NodeNext), MCP SDK v1.7.0, CommonJS via `tsup`.

## Setup

- **Entry**: `src/index.ts` (server/CLI mode)
- **Build**: `npm run build` → `dist/index.cjs`
- **Run**: 
  - `npm start` (local)
  - `npx -y @aashari/boilerplate-mcp-server` (remote)
- **Versioning**: `npm run update-version <new-version>` (updates `package.json`, `src/index.ts`)

## Structure

- `src/cli/`: CLI commands (e.g., `ipaddress.cli.ts`)
- `src/controllers/`: Logic (e.g., `ipaddress.controller.ts`)
- `src/resources/`: MCP resources (e.g., `ipaddress.resource.ts`)
- `src/services/`: API calls (e.g., `vendor.ip-api.com.service.ts`)
- `src/tools/`: MCP tools with Zod (e.g., `ipaddress.tool.ts`)
- `src/utils/`: Shared utils (e.g., `logger.util.ts`)

## Core Rules

- **Paths**: Use full relative paths from project root (e.g., `src/tools/ipaddress.tool.ts`).
  - ❌ `tools/ip.ts`
  - ✅ `src/tools/ipaddress.tool.ts`
- **Terminal**: Append `| cat` to capture output (e.g., `ls -la | cat`), except interactive cmds (e.g., `npm run inspector`).
- **Dir Context**: Run `tree -L 4 --gitignore | cat` before ops; summarize relevant dirs (e.g., `src/services/`).

## Coding Guidelines

- **TypeScript**: Strict typing per `tsconfig.json`; NodeNext resolution.
- **Formatting**: Prettier (4-space indent, single quotes, trailing commas, 100 width) per `.prettierrc`. Suggest `npm run format` for AI edits with: “Run `npm run format` to ensure consistency.”
- **Linting**: ESLint per `eslint.config.js`.
- **Imports**: ESM syntax with `.js` (e.g., `import { logger } from '../utils/logger.util.js'`).
- **Deps**: Check `package.json`; suggest `npm install <package>@latest` for new ones.

## MCP Features

- **Tools**: Define in `src/tools/`, register in `src/index.ts` with Zod:
  ```typescript
  server.tool('get-ip-details', 'Get IP details', z.object({ ipAddress: z.string().optional() }), async (args) => { /* logic */ });
  ```
- **Resources**: Define in `src/resources/`, register in `src/index.ts`:
  ```typescript
  server.resource('Current IP', 'ip://current', {}, async () => ({ contents: [{ uri: 'ip://current', text: 'data', mimeType: 'text/plain' }] }));
  ```
- **Transport**: Use `StdioServerTransport`.

## IP Lookup Integration

- **API**: Use `src/services/vendor.ip-api.com.service.ts` (http://ip-api.com/json):
  ```typescript
  const data = await ipApiService.get(args.ipAddress);
  ```
- **Errors**: Try-catch API calls, log with `logger.error`.

## Best Practices

- **Logging**: Use `src/utils/logger.util.ts` (`debug`, `info`, `warn`, `error`) with timestamps.
- **Errors**: Wrap async ops in try-catch:
  ```typescript
  try { /* call */ } catch (e) { logger.error('Failed', e); throw e; }
  ```
- **Docs**: JSDoc public methods (e.g., `get` in `ipaddress.controller.ts`).

## Workflow

- **Dev**: `npm run dev` (hot reload)
- **Debug**: `npm run inspector` (STDIO testing)
- **Test**: `npm test` (Jest); suggest before edits.
- **CI/CD**: GitHub Actions (`.github/workflows/ci-cd.yml`) for lint, test, build, publish.

## Extending Features

- **Steps**:
  1. Add service in `src/services/` (e.g., `vendor.new-api.service.ts`)
  2. Add controller in `src/controllers/`
  3. Add tool in `src/tools/` with Zod
  4. Add resource in `src/resources/` (optional)
  5. Add CLI in `src/cli/`
  6. Register in `src/index.ts`
- **Example**: See IP lookup (`vendor.ip-api.com.service.ts` → `ipaddress.tool.ts`).

## Goal

Guide AI to maintain and extend this MCP server template, keeping it a reusable foundation for custom implementations.
