name: CI/CD

on:
  push:
    branches: [ main ]

jobs:
  # Step 1: Run formatting, linting, and build checks
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check formatting
        run: npm run format:check
      
      - name: Lint code
        run: npm run lint
      
      - name: Build package
        run: npm run build
        
      - name: Run tests
        run: npm test
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  # Step 2: Check if version has changed
  check-version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      version: ${{ steps.check.outputs.version }}
      previous_version: ${{ steps.check.outputs.previous_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags
      
      - name: Check if package.json version changed
        id: check
        run: |
          # Get the current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ -z "$CURRENT_VERSION" ]; then
            echo "::error::Could not read current version from package.json"
            exit 1
          fi
          echo "::notice::Current version: $CURRENT_VERSION"
          
          # Try to find the previous version from the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LATEST_TAG" ]; then
            PREVIOUS_VERSION=${LATEST_TAG#v}
            echo "::notice::Previous version from tag: $PREVIOUS_VERSION"
            echo "previous_version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
            
            if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
              echo "::notice::Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
              echo "version_changed=true" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            else
              echo "::notice::Version unchanged"
              echo "version_changed=false" >> $GITHUB_OUTPUT
              echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            # No tags found, assume version changed
            echo "::notice::No previous version tag found, assuming version changed"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "previous_version=0.0.0" >> $GITHUB_OUTPUT
          fi

  # Step 3: Create GitHub Release when version has changed
  publish:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Changed from 'read' to allow tag creation
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for generating release notes
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      
      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          if git fetch --tags && git tag -l "v$VERSION" | grep -q "v$VERSION"; then
            echo "::notice::Tag v$VERSION already exists, skipping tag creation"
            echo "tag_exists=true" >> $GITHUB_OUTPUT
          else
            echo "::notice::Tag v$VERSION does not exist, will create it"
            echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Create version tag
        if: steps.check_tag.outputs.tag_exists != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ needs.check-version.outputs.version }} -m "Release v${{ needs.check-version.outputs.version }}"
          git push origin v${{ needs.check-version.outputs.version }}
      
      - name: Generate release notes
        id: release_notes
        run: |
          CURRENT_VERSION="${{ needs.check-version.outputs.version }}"
          PREVIOUS_VERSION="${{ needs.check-version.outputs.previous_version }}"
          
          echo "::notice::Generating release notes from v$PREVIOUS_VERSION to v$CURRENT_VERSION"
          
          # Create a temporary file for release notes
          NOTES_FILE=$(mktemp)
          
          # Check if previous version tag exists
          if git rev-parse "v$PREVIOUS_VERSION" >/dev/null 2>&1; then
            echo "## Changes since v$PREVIOUS_VERSION" > $NOTES_FILE
            echo "" >> $NOTES_FILE
            
            # Get commits between versions or from previous tag to HEAD
            if git rev-parse "v$CURRENT_VERSION" >/dev/null 2>&1; then
              git log --pretty=format:"- **%s** ([%h](https://github.com/aashari/boilerplate-mcp-server/commit/%H))" "v$PREVIOUS_VERSION"..."v$CURRENT_VERSION" > $NOTES_FILE.commits
            else
              git log --pretty=format:"- **%s** ([%h](https://github.com/aashari/boilerplate-mcp-server/commit/%H))" "v$PREVIOUS_VERSION"...HEAD > $NOTES_FILE.commits
            fi
          else
            echo "## Changes in this release" > $NOTES_FILE
            echo "" >> $NOTES_FILE
            
            # If no previous version tag, get recent commits (last 10)
            git log -n 10 --pretty=format:"- **%s** ([%h](https://github.com/aashari/boilerplate-mcp-server/commit/%H))" > $NOTES_FILE.commits
            
            echo "" >> $NOTES_FILE
            echo "Note: This shows the 10 most recent commits as no previous version tag was found." >> $NOTES_FILE
          fi
          
          # Add commits to release notes
          cat $NOTES_FILE.commits >> $NOTES_FILE
          
          # Add assets section
          echo "" >> $NOTES_FILE
          echo "## Assets" >> $NOTES_FILE
          echo "" >> $NOTES_FILE
          echo "- **index.cjs**: Main executable file (CommonJS format)" >> $NOTES_FILE
          echo "- **index.d.cts**: TypeScript declaration file" >> $NOTES_FILE
          echo "" >> $NOTES_FILE
          
          # Store release notes in a GitHub output variable
          RELEASE_NOTES=$(cat $NOTES_FILE)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Clean up temporary files
          rm $NOTES_FILE $NOTES_FILE.commits
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: v${{ needs.check-version.outputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
          files: |
            dist/index.cjs
            dist/index.d.cts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 

      - name: Setup Node.js for Publishing
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@aashari'

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
